syntax = "proto3";
package AiService;

service Transcription {
	rpc Transcription(stream TranscriptionRequest) returns (stream TranscriptionResponse);
	rpc KeywordSpotting (stream KeywordSpottingRequest) returns (stream KeywordSpottingResponse);
}

message TranscriptionRequest {
	oneof request_oneof {
		TranscriptionConfigRequest config = 1;
		TranscriptionAudioRequest audio = 2;
		TranscriptionCloseRequest close = 3;
	}
}
message TranscriptionConfigRequest {
	string prompt = 1;
	KeywordSpottingConfigRequest kws_config = 2;
	bool return_opus = 3;
	bool return_words = 4;
}
message TranscriptionAudioRequest {	
	repeated bytes data = 1;
	string speaker_id = 2;
	bool force_flush = 3;
}

message TranscriptionCloseRequest {
	bool is_abort = 1;
}

message TranscriptionResponse {
	oneof response_oneof {
		TranscriptionConfigResponse config = 1;
		TranscriptionEventResponse event = 2;
		TranscriptionCloseResponse close = 3;
	}
}

message TranscriptionConfigResponse {
	bool success = 1;
	string prompt = 2;
	KeywordSpottingConfigResponse kws_config = 3;
}

message TranscriptionEventResponse {
	string text = 1;
	repeated TranscriptionEventWord words = 2;
	string speaker_id = 3;
	float probability = 4;
	bytes opusData = 5;
	string info = 6; // json
}

message TranscriptionEventWord {
	string word = 1;
	float probability = 2;	
	int64 timestamp = 3;
}

message TranscriptionCloseResponse {
	bool success = 1;
}


message KeywordSpottingRequest {
	oneof request_oneof {
		KeywordSpottingConfigRequest config = 1;
		KeywordSpottingAudioRequest audio = 2;
	}
	bool is_final = 3;
}

message KeywordSpottingConfigRequest {
	repeated string keyword = 1;
	float threshold = 2;
}

message KeywordSpottingAudioRequest {
	repeated bytes data = 1;
	string speaker_id = 2;
}


message KeywordSpottingFound {
	string id = 1;
	string keyword = 2;
	float probability = 3;
}

message KeywordSpottingFoundEventResponse {
	repeated KeywordSpottingFound found = 1;
	string speaker_id = 2;
	string decoder_text = 3;
}

message KeywordSpottingConfigResponse {
	bool success = 1;
	repeated string keyword = 2;
}

message KeywordSpottingResponse {
	oneof response_oneof {
		KeywordSpottingFoundEventResponse found = 1;
		KeywordSpottingConfigResponse config = 2;
	}
}

// for backward compatibility
message DiscordOpusPacket {
	int64 timestamp = 1;
	bytes data = 2;
}

message DiscordOpusPacketList {
	repeated DiscordOpusPacket packets = 1;
	string speaker_id = 2;
	string prompt = 3;
	bool is_final = 4;
}