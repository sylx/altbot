syntax = "proto3";
package AiService;

service Transcription {
	rpc TranscriptionBiStreams (stream DiscordOpusPacketList) returns (stream TranscriptionEvent);
	rpc KeywordSpotting (stream KeywordSpottingRequest) returns (stream KeywordSpottingResponse);
}

message DiscordOpusPacket {
	int64 timestamp = 1;
	bytes data = 2;
}

message DiscordOpusPacketList {
	repeated DiscordOpusPacket packets = 1;
	string speaker_id = 2;
	string prompt = 3;
	bool is_final = 4;
}

message TranscriptionEvent {
	string eventName = 1;
	string eventData = 2;
	bytes opusData = 3;
}

message KeywordSpottingRequestConfig {
	repeated string keyword = 1;
}

message KeywordSpottingRequestAudio {
	repeated bytes data = 1;
	string speaker_id = 2;
	int64 timestamp = 3;
}

message KeywordSpottingRequest {
	oneof request_oneof {
		KeywordSpottingRequestConfig config = 1;
		KeywordSpottingRequestAudio audio = 2;
	}
	bool is_final = 3;
}

message KeywordSpottingFound {
	string keyword = 1;
	float probability = 2;
}

message KeywordSpottingFoundEventResponse {
	repeated KeywordSpottingFound found = 1;
	string speaker_id = 2;
	string decoder_text = 3;
}

message KeywordSpottingConfigResponse {
	bool success = 1;
	repeated string keyword = 2;
}

message KeywordSpottingResponse {
	oneof response_oneof {
		KeywordSpottingFoundEventResponse found = 1;
		KeywordSpottingConfigResponse config = 2;
	}
}

