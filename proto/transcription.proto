syntax = "proto3";
package AiService;

service Transcription {
	rpc Transcription(stream TranscriptionRequest) returns (stream TranscriptionResponse);
	rpc KeywordSpotting (stream KeywordSpottingRequest) returns (stream KeywordSpottingResponse);
}

message TranscriptionRequest {
	oneof request_oneof {
		TranscriptionRequestConfig config = 1;
		TranscriptionRequestAudio audio = 2;
	}
	bool is_final = 3;	
}
message TranscriptionRequestConfig {
	string prompt = 1;
	KeywordSpottingRequestConfig kws_config = 2;
	bool return_opus = 3;
}
message TranscriptionRequestAudio {	
	repeated bytes data = 1;
	string speaker_id = 2;
}

message TranscriptionResponse {
	oneof response_oneof {
		TranscriptionConfigResponse config = 1;
		TranscriptionEventResponse event = 2;
	}
}

message TranscriptionConfigResponse {
	bool success = 1;
	string prompt = 2;
	KeywordSpottingConfigResponse kws_config = 3;
}

message TranscriptionEventResponse {
	string text = 1;
	repeated TranscriptionEventWord words = 2;
	string speaker_id = 3;
	float probability = 4;
	bytes opusData = 5;
	string info = 6; // json
}

message TranscriptionEventWord {
	string word = 1;
	float probability = 2;	
	int64 timestamp = 3;
}


message KeywordSpottingRequestConfig {
	repeated string keyword = 1;
	float threshold = 2;
}

message KeywordSpottingRequestAudio {
	repeated bytes data = 1;
	string speaker_id = 2;
}

message KeywordSpottingRequest {
	oneof request_oneof {
		KeywordSpottingRequestConfig config = 1;
		KeywordSpottingRequestAudio audio = 2;
	}
	bool is_final = 3;
}

message KeywordSpottingFound {
	string id = 1;
	string keyword = 2;
	float probability = 3;
}

message KeywordSpottingFoundEventResponse {
	repeated KeywordSpottingFound found = 1;
	string speaker_id = 2;
	string decoder_text = 3;
}

message KeywordSpottingConfigResponse {
	bool success = 1;
	repeated string keyword = 2;
}

message KeywordSpottingResponse {
	oneof response_oneof {
		KeywordSpottingFoundEventResponse found = 1;
		KeywordSpottingConfigResponse config = 2;
	}
}

// for backward compatibility
message DiscordOpusPacket {
	int64 timestamp = 1;
	bytes data = 2;
}

message DiscordOpusPacketList {
	repeated DiscordOpusPacket packets = 1;
	string speaker_id = 2;
	string prompt = 3;
	bool is_final = 4;
}