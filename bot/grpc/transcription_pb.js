// source: transcription.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.AiService.DiscordOpusPacket', null, global);
goog.exportSymbol('proto.AiService.DiscordOpusPacketList', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingConfigResponse', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingFound', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingFoundEventResponse', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingRequest', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingRequest.RequestOneofCase', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingRequestAudio', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingRequestConfig', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingResponse', null, global);
goog.exportSymbol('proto.AiService.KeywordSpottingResponse.ResponseOneofCase', null, global);
goog.exportSymbol('proto.AiService.TranscriptionConfigResponse', null, global);
goog.exportSymbol('proto.AiService.TranscriptionEventResponse', null, global);
goog.exportSymbol('proto.AiService.TranscriptionRequest', null, global);
goog.exportSymbol('proto.AiService.TranscriptionRequest.RequestOneofCase', null, global);
goog.exportSymbol('proto.AiService.TranscriptionRequestAudio', null, global);
goog.exportSymbol('proto.AiService.TranscriptionRequestConfig', null, global);
goog.exportSymbol('proto.AiService.TranscriptionResponse', null, global);
goog.exportSymbol('proto.AiService.TranscriptionResponse.ResponseOneofCase', null, global);
goog.exportSymbol('proto.AiService.TranscriptionVADEventResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AiService.TranscriptionRequest.oneofGroups_);
};
goog.inherits(proto.AiService.TranscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionRequest.displayName = 'proto.AiService.TranscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionRequestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.TranscriptionRequestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionRequestConfig.displayName = 'proto.AiService.TranscriptionRequestConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionRequestAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.TranscriptionRequestAudio.repeatedFields_, null);
};
goog.inherits(proto.AiService.TranscriptionRequestAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionRequestAudio.displayName = 'proto.AiService.TranscriptionRequestAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AiService.TranscriptionResponse.oneofGroups_);
};
goog.inherits(proto.AiService.TranscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionResponse.displayName = 'proto.AiService.TranscriptionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.TranscriptionConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionConfigResponse.displayName = 'proto.AiService.TranscriptionConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.TranscriptionEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionEventResponse.displayName = 'proto.AiService.TranscriptionEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.TranscriptionVADEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.TranscriptionVADEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.TranscriptionVADEventResponse.displayName = 'proto.AiService.TranscriptionVADEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingRequestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.KeywordSpottingRequestConfig.repeatedFields_, null);
};
goog.inherits(proto.AiService.KeywordSpottingRequestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingRequestConfig.displayName = 'proto.AiService.KeywordSpottingRequestConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingRequestAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.KeywordSpottingRequestAudio.repeatedFields_, null);
};
goog.inherits(proto.AiService.KeywordSpottingRequestAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingRequestAudio.displayName = 'proto.AiService.KeywordSpottingRequestAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AiService.KeywordSpottingRequest.oneofGroups_);
};
goog.inherits(proto.AiService.KeywordSpottingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingRequest.displayName = 'proto.AiService.KeywordSpottingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingFound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.KeywordSpottingFound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingFound.displayName = 'proto.AiService.KeywordSpottingFound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingFoundEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.KeywordSpottingFoundEventResponse.repeatedFields_, null);
};
goog.inherits(proto.AiService.KeywordSpottingFoundEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingFoundEventResponse.displayName = 'proto.AiService.KeywordSpottingFoundEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.KeywordSpottingConfigResponse.repeatedFields_, null);
};
goog.inherits(proto.AiService.KeywordSpottingConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingConfigResponse.displayName = 'proto.AiService.KeywordSpottingConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.KeywordSpottingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AiService.KeywordSpottingResponse.oneofGroups_);
};
goog.inherits(proto.AiService.KeywordSpottingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.KeywordSpottingResponse.displayName = 'proto.AiService.KeywordSpottingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.DiscordOpusPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AiService.DiscordOpusPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.DiscordOpusPacket.displayName = 'proto.AiService.DiscordOpusPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiService.DiscordOpusPacketList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AiService.DiscordOpusPacketList.repeatedFields_, null);
};
goog.inherits(proto.AiService.DiscordOpusPacketList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AiService.DiscordOpusPacketList.displayName = 'proto.AiService.DiscordOpusPacketList';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AiService.TranscriptionRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AiService.TranscriptionRequest.RequestOneofCase = {
  REQUEST_ONEOF_NOT_SET: 0,
  CONFIG: 1,
  AUDIO: 2
};

/**
 * @return {proto.AiService.TranscriptionRequest.RequestOneofCase}
 */
proto.AiService.TranscriptionRequest.prototype.getRequestOneofCase = function() {
  return /** @type {proto.AiService.TranscriptionRequest.RequestOneofCase} */(jspb.Message.computeOneofCase(this, proto.AiService.TranscriptionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.AiService.TranscriptionRequestConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.AiService.TranscriptionRequestAudio.toObject(includeInstance, f),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionRequest}
 */
proto.AiService.TranscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionRequest;
  return proto.AiService.TranscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionRequest}
 */
proto.AiService.TranscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.TranscriptionRequestConfig;
      reader.readMessage(value,proto.AiService.TranscriptionRequestConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.AiService.TranscriptionRequestAudio;
      reader.readMessage(value,proto.AiService.TranscriptionRequestAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AiService.TranscriptionRequestConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AiService.TranscriptionRequestAudio.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional TranscriptionRequestConfig config = 1;
 * @return {?proto.AiService.TranscriptionRequestConfig}
 */
proto.AiService.TranscriptionRequest.prototype.getConfig = function() {
  return /** @type{?proto.AiService.TranscriptionRequestConfig} */ (
    jspb.Message.getWrapperField(this, proto.AiService.TranscriptionRequestConfig, 1));
};


/**
 * @param {?proto.AiService.TranscriptionRequestConfig|undefined} value
 * @return {!proto.AiService.TranscriptionRequest} returns this
*/
proto.AiService.TranscriptionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.AiService.TranscriptionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionRequest} returns this
 */
proto.AiService.TranscriptionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TranscriptionRequestAudio audio = 2;
 * @return {?proto.AiService.TranscriptionRequestAudio}
 */
proto.AiService.TranscriptionRequest.prototype.getAudio = function() {
  return /** @type{?proto.AiService.TranscriptionRequestAudio} */ (
    jspb.Message.getWrapperField(this, proto.AiService.TranscriptionRequestAudio, 2));
};


/**
 * @param {?proto.AiService.TranscriptionRequestAudio|undefined} value
 * @return {!proto.AiService.TranscriptionRequest} returns this
*/
proto.AiService.TranscriptionRequest.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.AiService.TranscriptionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionRequest} returns this
 */
proto.AiService.TranscriptionRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_final = 3;
 * @return {boolean}
 */
proto.AiService.TranscriptionRequest.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.TranscriptionRequest} returns this
 */
proto.AiService.TranscriptionRequest.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionRequestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionRequestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionRequestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    prompt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kwsConfig: (f = msg.getKwsConfig()) && proto.AiService.KeywordSpottingRequestConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionRequestConfig}
 */
proto.AiService.TranscriptionRequestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionRequestConfig;
  return proto.AiService.TranscriptionRequestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionRequestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionRequestConfig}
 */
proto.AiService.TranscriptionRequestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrompt(value);
      break;
    case 2:
      var value = new proto.AiService.KeywordSpottingRequestConfig;
      reader.readMessage(value,proto.AiService.KeywordSpottingRequestConfig.deserializeBinaryFromReader);
      msg.setKwsConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionRequestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionRequestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionRequestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrompt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKwsConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AiService.KeywordSpottingRequestConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string prompt = 1;
 * @return {string}
 */
proto.AiService.TranscriptionRequestConfig.prototype.getPrompt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionRequestConfig} returns this
 */
proto.AiService.TranscriptionRequestConfig.prototype.setPrompt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional KeywordSpottingRequestConfig kws_config = 2;
 * @return {?proto.AiService.KeywordSpottingRequestConfig}
 */
proto.AiService.TranscriptionRequestConfig.prototype.getKwsConfig = function() {
  return /** @type{?proto.AiService.KeywordSpottingRequestConfig} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingRequestConfig, 2));
};


/**
 * @param {?proto.AiService.KeywordSpottingRequestConfig|undefined} value
 * @return {!proto.AiService.TranscriptionRequestConfig} returns this
*/
proto.AiService.TranscriptionRequestConfig.prototype.setKwsConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionRequestConfig} returns this
 */
proto.AiService.TranscriptionRequestConfig.prototype.clearKwsConfig = function() {
  return this.setKwsConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionRequestConfig.prototype.hasKwsConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.TranscriptionRequestAudio.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionRequestAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionRequestAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionRequestAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequestAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: msg.getDataList_asB64(),
    speakerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionRequestAudio}
 */
proto.AiService.TranscriptionRequestAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionRequestAudio;
  return proto.AiService.TranscriptionRequestAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionRequestAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionRequestAudio}
 */
proto.AiService.TranscriptionRequestAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionRequestAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionRequestAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionRequestAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionRequestAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated bytes data = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.AiService.TranscriptionRequestAudio.prototype.getDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes data = 1;
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<string>}
 */
proto.AiService.TranscriptionRequestAudio.prototype.getDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDataList()));
};


/**
 * repeated bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.AiService.TranscriptionRequestAudio.prototype.getDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.AiService.TranscriptionRequestAudio} returns this
 */
proto.AiService.TranscriptionRequestAudio.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.AiService.TranscriptionRequestAudio} returns this
 */
proto.AiService.TranscriptionRequestAudio.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.TranscriptionRequestAudio} returns this
 */
proto.AiService.TranscriptionRequestAudio.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional string speaker_id = 2;
 * @return {string}
 */
proto.AiService.TranscriptionRequestAudio.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionRequestAudio} returns this
 */
proto.AiService.TranscriptionRequestAudio.prototype.setSpeakerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AiService.TranscriptionResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.AiService.TranscriptionResponse.ResponseOneofCase = {
  RESPONSE_ONEOF_NOT_SET: 0,
  CONFIG: 1,
  EVENT: 2,
  VAD_EVENT: 3
};

/**
 * @return {proto.AiService.TranscriptionResponse.ResponseOneofCase}
 */
proto.AiService.TranscriptionResponse.prototype.getResponseOneofCase = function() {
  return /** @type {proto.AiService.TranscriptionResponse.ResponseOneofCase} */(jspb.Message.computeOneofCase(this, proto.AiService.TranscriptionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.AiService.TranscriptionConfigResponse.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.AiService.TranscriptionEventResponse.toObject(includeInstance, f),
    vadEvent: (f = msg.getVadEvent()) && proto.AiService.TranscriptionVADEventResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionResponse}
 */
proto.AiService.TranscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionResponse;
  return proto.AiService.TranscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionResponse}
 */
proto.AiService.TranscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.TranscriptionConfigResponse;
      reader.readMessage(value,proto.AiService.TranscriptionConfigResponse.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.AiService.TranscriptionEventResponse;
      reader.readMessage(value,proto.AiService.TranscriptionEventResponse.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 3:
      var value = new proto.AiService.TranscriptionVADEventResponse;
      reader.readMessage(value,proto.AiService.TranscriptionVADEventResponse.deserializeBinaryFromReader);
      msg.setVadEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AiService.TranscriptionConfigResponse.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AiService.TranscriptionEventResponse.serializeBinaryToWriter
    );
  }
  f = message.getVadEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.AiService.TranscriptionVADEventResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional TranscriptionConfigResponse config = 1;
 * @return {?proto.AiService.TranscriptionConfigResponse}
 */
proto.AiService.TranscriptionResponse.prototype.getConfig = function() {
  return /** @type{?proto.AiService.TranscriptionConfigResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.TranscriptionConfigResponse, 1));
};


/**
 * @param {?proto.AiService.TranscriptionConfigResponse|undefined} value
 * @return {!proto.AiService.TranscriptionResponse} returns this
*/
proto.AiService.TranscriptionResponse.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.AiService.TranscriptionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionResponse} returns this
 */
proto.AiService.TranscriptionResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TranscriptionEventResponse event = 2;
 * @return {?proto.AiService.TranscriptionEventResponse}
 */
proto.AiService.TranscriptionResponse.prototype.getEvent = function() {
  return /** @type{?proto.AiService.TranscriptionEventResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.TranscriptionEventResponse, 2));
};


/**
 * @param {?proto.AiService.TranscriptionEventResponse|undefined} value
 * @return {!proto.AiService.TranscriptionResponse} returns this
*/
proto.AiService.TranscriptionResponse.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.AiService.TranscriptionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionResponse} returns this
 */
proto.AiService.TranscriptionResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TranscriptionVADEventResponse vad_event = 3;
 * @return {?proto.AiService.TranscriptionVADEventResponse}
 */
proto.AiService.TranscriptionResponse.prototype.getVadEvent = function() {
  return /** @type{?proto.AiService.TranscriptionVADEventResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.TranscriptionVADEventResponse, 3));
};


/**
 * @param {?proto.AiService.TranscriptionVADEventResponse|undefined} value
 * @return {!proto.AiService.TranscriptionResponse} returns this
*/
proto.AiService.TranscriptionResponse.prototype.setVadEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.AiService.TranscriptionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionResponse} returns this
 */
proto.AiService.TranscriptionResponse.prototype.clearVadEvent = function() {
  return this.setVadEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionResponse.prototype.hasVadEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    prompt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kwsConfig: (f = msg.getKwsConfig()) && proto.AiService.KeywordSpottingConfigResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionConfigResponse}
 */
proto.AiService.TranscriptionConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionConfigResponse;
  return proto.AiService.TranscriptionConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionConfigResponse}
 */
proto.AiService.TranscriptionConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrompt(value);
      break;
    case 3:
      var value = new proto.AiService.KeywordSpottingConfigResponse;
      reader.readMessage(value,proto.AiService.KeywordSpottingConfigResponse.deserializeBinaryFromReader);
      msg.setKwsConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPrompt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKwsConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.AiService.KeywordSpottingConfigResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.AiService.TranscriptionConfigResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.TranscriptionConfigResponse} returns this
 */
proto.AiService.TranscriptionConfigResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string prompt = 2;
 * @return {string}
 */
proto.AiService.TranscriptionConfigResponse.prototype.getPrompt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionConfigResponse} returns this
 */
proto.AiService.TranscriptionConfigResponse.prototype.setPrompt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional KeywordSpottingConfigResponse kws_config = 3;
 * @return {?proto.AiService.KeywordSpottingConfigResponse}
 */
proto.AiService.TranscriptionConfigResponse.prototype.getKwsConfig = function() {
  return /** @type{?proto.AiService.KeywordSpottingConfigResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingConfigResponse, 3));
};


/**
 * @param {?proto.AiService.KeywordSpottingConfigResponse|undefined} value
 * @return {!proto.AiService.TranscriptionConfigResponse} returns this
*/
proto.AiService.TranscriptionConfigResponse.prototype.setKwsConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.TranscriptionConfigResponse} returns this
 */
proto.AiService.TranscriptionConfigResponse.prototype.clearKwsConfig = function() {
  return this.setKwsConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.TranscriptionConfigResponse.prototype.hasKwsConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    probability: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    speakerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    opusdata: msg.getOpusdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionEventResponse}
 */
proto.AiService.TranscriptionEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionEventResponse;
  return proto.AiService.TranscriptionEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionEventResponse}
 */
proto.AiService.TranscriptionEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProbability(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpusdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProbability();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpusdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.AiService.TranscriptionEventResponse.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionEventResponse} returns this
 */
proto.AiService.TranscriptionEventResponse.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float probability = 2;
 * @return {number}
 */
proto.AiService.TranscriptionEventResponse.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AiService.TranscriptionEventResponse} returns this
 */
proto.AiService.TranscriptionEventResponse.prototype.setProbability = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string speaker_id = 3;
 * @return {string}
 */
proto.AiService.TranscriptionEventResponse.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionEventResponse} returns this
 */
proto.AiService.TranscriptionEventResponse.prototype.setSpeakerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes opusData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.AiService.TranscriptionEventResponse.prototype.getOpusdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes opusData = 4;
 * This is a type-conversion wrapper around `getOpusdata()`
 * @return {string}
 */
proto.AiService.TranscriptionEventResponse.prototype.getOpusdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpusdata()));
};


/**
 * optional bytes opusData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpusdata()`
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionEventResponse.prototype.getOpusdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpusdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AiService.TranscriptionEventResponse} returns this
 */
proto.AiService.TranscriptionEventResponse.prototype.setOpusdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.TranscriptionVADEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.TranscriptionVADEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.TranscriptionVADEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionVADEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSpeech: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    speakerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.TranscriptionVADEventResponse}
 */
proto.AiService.TranscriptionVADEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.TranscriptionVADEventResponse;
  return proto.AiService.TranscriptionVADEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.TranscriptionVADEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.TranscriptionVADEventResponse}
 */
proto.AiService.TranscriptionVADEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSpeech(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.TranscriptionVADEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.TranscriptionVADEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.TranscriptionVADEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.TranscriptionVADEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSpeech();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool is_speech = 1;
 * @return {boolean}
 */
proto.AiService.TranscriptionVADEventResponse.prototype.getIsSpeech = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.TranscriptionVADEventResponse} returns this
 */
proto.AiService.TranscriptionVADEventResponse.prototype.setIsSpeech = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string speaker_id = 2;
 * @return {string}
 */
proto.AiService.TranscriptionVADEventResponse.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.TranscriptionVADEventResponse} returns this
 */
proto.AiService.TranscriptionVADEventResponse.prototype.setSpeakerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.KeywordSpottingRequestConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingRequestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingRequestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    keywordList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingRequestConfig}
 */
proto.AiService.KeywordSpottingRequestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingRequestConfig;
  return proto.AiService.KeywordSpottingRequestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingRequestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingRequestConfig}
 */
proto.AiService.KeywordSpottingRequestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeyword(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingRequestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingRequestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeywordList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated string keyword = 1;
 * @return {!Array<string>}
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.getKeywordList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.AiService.KeywordSpottingRequestConfig} returns this
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.setKeywordList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.AiService.KeywordSpottingRequestConfig} returns this
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.addKeyword = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.KeywordSpottingRequestConfig} returns this
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.clearKeywordList = function() {
  return this.setKeywordList([]);
};


/**
 * optional float threshold = 2;
 * @return {number}
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AiService.KeywordSpottingRequestConfig} returns this
 */
proto.AiService.KeywordSpottingRequestConfig.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.KeywordSpottingRequestAudio.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingRequestAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingRequestAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequestAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: msg.getDataList_asB64(),
    speakerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingRequestAudio}
 */
proto.AiService.KeywordSpottingRequestAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingRequestAudio;
  return proto.AiService.KeywordSpottingRequestAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingRequestAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingRequestAudio}
 */
proto.AiService.KeywordSpottingRequestAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingRequestAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingRequestAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequestAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated bytes data = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.getDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes data = 1;
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<string>}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.getDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDataList()));
};


/**
 * repeated bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.getDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.AiService.KeywordSpottingRequestAudio} returns this
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.AiService.KeywordSpottingRequestAudio} returns this
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.KeywordSpottingRequestAudio} returns this
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional string speaker_id = 2;
 * @return {string}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.KeywordSpottingRequestAudio} returns this
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.setSpeakerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AiService.KeywordSpottingRequestAudio} returns this
 */
proto.AiService.KeywordSpottingRequestAudio.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AiService.KeywordSpottingRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AiService.KeywordSpottingRequest.RequestOneofCase = {
  REQUEST_ONEOF_NOT_SET: 0,
  CONFIG: 1,
  AUDIO: 2
};

/**
 * @return {proto.AiService.KeywordSpottingRequest.RequestOneofCase}
 */
proto.AiService.KeywordSpottingRequest.prototype.getRequestOneofCase = function() {
  return /** @type {proto.AiService.KeywordSpottingRequest.RequestOneofCase} */(jspb.Message.computeOneofCase(this, proto.AiService.KeywordSpottingRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.AiService.KeywordSpottingRequestConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.AiService.KeywordSpottingRequestAudio.toObject(includeInstance, f),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingRequest}
 */
proto.AiService.KeywordSpottingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingRequest;
  return proto.AiService.KeywordSpottingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingRequest}
 */
proto.AiService.KeywordSpottingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.KeywordSpottingRequestConfig;
      reader.readMessage(value,proto.AiService.KeywordSpottingRequestConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.AiService.KeywordSpottingRequestAudio;
      reader.readMessage(value,proto.AiService.KeywordSpottingRequestAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AiService.KeywordSpottingRequestConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AiService.KeywordSpottingRequestAudio.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional KeywordSpottingRequestConfig config = 1;
 * @return {?proto.AiService.KeywordSpottingRequestConfig}
 */
proto.AiService.KeywordSpottingRequest.prototype.getConfig = function() {
  return /** @type{?proto.AiService.KeywordSpottingRequestConfig} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingRequestConfig, 1));
};


/**
 * @param {?proto.AiService.KeywordSpottingRequestConfig|undefined} value
 * @return {!proto.AiService.KeywordSpottingRequest} returns this
*/
proto.AiService.KeywordSpottingRequest.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.AiService.KeywordSpottingRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.KeywordSpottingRequest} returns this
 */
proto.AiService.KeywordSpottingRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.KeywordSpottingRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeywordSpottingRequestAudio audio = 2;
 * @return {?proto.AiService.KeywordSpottingRequestAudio}
 */
proto.AiService.KeywordSpottingRequest.prototype.getAudio = function() {
  return /** @type{?proto.AiService.KeywordSpottingRequestAudio} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingRequestAudio, 2));
};


/**
 * @param {?proto.AiService.KeywordSpottingRequestAudio|undefined} value
 * @return {!proto.AiService.KeywordSpottingRequest} returns this
*/
proto.AiService.KeywordSpottingRequest.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.AiService.KeywordSpottingRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.KeywordSpottingRequest} returns this
 */
proto.AiService.KeywordSpottingRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.KeywordSpottingRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_final = 3;
 * @return {boolean}
 */
proto.AiService.KeywordSpottingRequest.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.KeywordSpottingRequest} returns this
 */
proto.AiService.KeywordSpottingRequest.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingFound.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingFound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingFound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingFound.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyword: jspb.Message.getFieldWithDefault(msg, 2, ""),
    probability: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingFound}
 */
proto.AiService.KeywordSpottingFound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingFound;
  return proto.AiService.KeywordSpottingFound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingFound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingFound}
 */
proto.AiService.KeywordSpottingFound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyword(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProbability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingFound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingFound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingFound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingFound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProbability();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.AiService.KeywordSpottingFound.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.KeywordSpottingFound} returns this
 */
proto.AiService.KeywordSpottingFound.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keyword = 2;
 * @return {string}
 */
proto.AiService.KeywordSpottingFound.prototype.getKeyword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.KeywordSpottingFound} returns this
 */
proto.AiService.KeywordSpottingFound.prototype.setKeyword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float probability = 3;
 * @return {number}
 */
proto.AiService.KeywordSpottingFound.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AiService.KeywordSpottingFound} returns this
 */
proto.AiService.KeywordSpottingFound.prototype.setProbability = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.KeywordSpottingFoundEventResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingFoundEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingFoundEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingFoundEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    foundList: jspb.Message.toObjectList(msg.getFoundList(),
    proto.AiService.KeywordSpottingFound.toObject, includeInstance),
    speakerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decoderText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse}
 */
proto.AiService.KeywordSpottingFoundEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingFoundEventResponse;
  return proto.AiService.KeywordSpottingFoundEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingFoundEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse}
 */
proto.AiService.KeywordSpottingFoundEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.KeywordSpottingFound;
      reader.readMessage(value,proto.AiService.KeywordSpottingFound.deserializeBinaryFromReader);
      msg.addFound(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecoderText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingFoundEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingFoundEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingFoundEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFoundList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AiService.KeywordSpottingFound.serializeBinaryToWriter
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecoderText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated KeywordSpottingFound found = 1;
 * @return {!Array<!proto.AiService.KeywordSpottingFound>}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.getFoundList = function() {
  return /** @type{!Array<!proto.AiService.KeywordSpottingFound>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AiService.KeywordSpottingFound, 1));
};


/**
 * @param {!Array<!proto.AiService.KeywordSpottingFound>} value
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse} returns this
*/
proto.AiService.KeywordSpottingFoundEventResponse.prototype.setFoundList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AiService.KeywordSpottingFound=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AiService.KeywordSpottingFound}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.addFound = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AiService.KeywordSpottingFound, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse} returns this
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.clearFoundList = function() {
  return this.setFoundList([]);
};


/**
 * optional string speaker_id = 2;
 * @return {string}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse} returns this
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.setSpeakerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string decoder_text = 3;
 * @return {string}
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.getDecoderText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AiService.KeywordSpottingFoundEventResponse} returns this
 */
proto.AiService.KeywordSpottingFoundEventResponse.prototype.setDecoderText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.KeywordSpottingConfigResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    keywordList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingConfigResponse}
 */
proto.AiService.KeywordSpottingConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingConfigResponse;
  return proto.AiService.KeywordSpottingConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingConfigResponse}
 */
proto.AiService.KeywordSpottingConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeyword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeywordList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.KeywordSpottingConfigResponse} returns this
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string keyword = 2;
 * @return {!Array<string>}
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.getKeywordList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.AiService.KeywordSpottingConfigResponse} returns this
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.setKeywordList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.AiService.KeywordSpottingConfigResponse} returns this
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.addKeyword = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.KeywordSpottingConfigResponse} returns this
 */
proto.AiService.KeywordSpottingConfigResponse.prototype.clearKeywordList = function() {
  return this.setKeywordList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AiService.KeywordSpottingResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AiService.KeywordSpottingResponse.ResponseOneofCase = {
  RESPONSE_ONEOF_NOT_SET: 0,
  FOUND: 1,
  CONFIG: 2
};

/**
 * @return {proto.AiService.KeywordSpottingResponse.ResponseOneofCase}
 */
proto.AiService.KeywordSpottingResponse.prototype.getResponseOneofCase = function() {
  return /** @type {proto.AiService.KeywordSpottingResponse.ResponseOneofCase} */(jspb.Message.computeOneofCase(this, proto.AiService.KeywordSpottingResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.KeywordSpottingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.KeywordSpottingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.KeywordSpottingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    found: (f = msg.getFound()) && proto.AiService.KeywordSpottingFoundEventResponse.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.AiService.KeywordSpottingConfigResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.KeywordSpottingResponse}
 */
proto.AiService.KeywordSpottingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.KeywordSpottingResponse;
  return proto.AiService.KeywordSpottingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.KeywordSpottingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.KeywordSpottingResponse}
 */
proto.AiService.KeywordSpottingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.KeywordSpottingFoundEventResponse;
      reader.readMessage(value,proto.AiService.KeywordSpottingFoundEventResponse.deserializeBinaryFromReader);
      msg.setFound(value);
      break;
    case 2:
      var value = new proto.AiService.KeywordSpottingConfigResponse;
      reader.readMessage(value,proto.AiService.KeywordSpottingConfigResponse.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.KeywordSpottingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.KeywordSpottingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.KeywordSpottingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.KeywordSpottingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFound();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AiService.KeywordSpottingFoundEventResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AiService.KeywordSpottingConfigResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeywordSpottingFoundEventResponse found = 1;
 * @return {?proto.AiService.KeywordSpottingFoundEventResponse}
 */
proto.AiService.KeywordSpottingResponse.prototype.getFound = function() {
  return /** @type{?proto.AiService.KeywordSpottingFoundEventResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingFoundEventResponse, 1));
};


/**
 * @param {?proto.AiService.KeywordSpottingFoundEventResponse|undefined} value
 * @return {!proto.AiService.KeywordSpottingResponse} returns this
*/
proto.AiService.KeywordSpottingResponse.prototype.setFound = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.AiService.KeywordSpottingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.KeywordSpottingResponse} returns this
 */
proto.AiService.KeywordSpottingResponse.prototype.clearFound = function() {
  return this.setFound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.KeywordSpottingResponse.prototype.hasFound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeywordSpottingConfigResponse config = 2;
 * @return {?proto.AiService.KeywordSpottingConfigResponse}
 */
proto.AiService.KeywordSpottingResponse.prototype.getConfig = function() {
  return /** @type{?proto.AiService.KeywordSpottingConfigResponse} */ (
    jspb.Message.getWrapperField(this, proto.AiService.KeywordSpottingConfigResponse, 2));
};


/**
 * @param {?proto.AiService.KeywordSpottingConfigResponse|undefined} value
 * @return {!proto.AiService.KeywordSpottingResponse} returns this
*/
proto.AiService.KeywordSpottingResponse.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.AiService.KeywordSpottingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AiService.KeywordSpottingResponse} returns this
 */
proto.AiService.KeywordSpottingResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AiService.KeywordSpottingResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.DiscordOpusPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.DiscordOpusPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.DiscordOpusPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.DiscordOpusPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.DiscordOpusPacket}
 */
proto.AiService.DiscordOpusPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.DiscordOpusPacket;
  return proto.AiService.DiscordOpusPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.DiscordOpusPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.DiscordOpusPacket}
 */
proto.AiService.DiscordOpusPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.DiscordOpusPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.DiscordOpusPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.DiscordOpusPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.DiscordOpusPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.AiService.DiscordOpusPacket.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AiService.DiscordOpusPacket} returns this
 */
proto.AiService.DiscordOpusPacket.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AiService.DiscordOpusPacket.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.AiService.DiscordOpusPacket.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.AiService.DiscordOpusPacket.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AiService.DiscordOpusPacket} returns this
 */
proto.AiService.DiscordOpusPacket.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AiService.DiscordOpusPacketList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiService.DiscordOpusPacketList.prototype.toObject = function(opt_includeInstance) {
  return proto.AiService.DiscordOpusPacketList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiService.DiscordOpusPacketList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.DiscordOpusPacketList.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetsList: jspb.Message.toObjectList(msg.getPacketsList(),
    proto.AiService.DiscordOpusPacket.toObject, includeInstance),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiService.DiscordOpusPacketList}
 */
proto.AiService.DiscordOpusPacketList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiService.DiscordOpusPacketList;
  return proto.AiService.DiscordOpusPacketList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiService.DiscordOpusPacketList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiService.DiscordOpusPacketList}
 */
proto.AiService.DiscordOpusPacketList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AiService.DiscordOpusPacket;
      reader.readMessage(value,proto.AiService.DiscordOpusPacket.deserializeBinaryFromReader);
      msg.addPackets(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiService.DiscordOpusPacketList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiService.DiscordOpusPacketList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiService.DiscordOpusPacketList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiService.DiscordOpusPacketList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AiService.DiscordOpusPacket.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated DiscordOpusPacket packets = 1;
 * @return {!Array<!proto.AiService.DiscordOpusPacket>}
 */
proto.AiService.DiscordOpusPacketList.prototype.getPacketsList = function() {
  return /** @type{!Array<!proto.AiService.DiscordOpusPacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AiService.DiscordOpusPacket, 1));
};


/**
 * @param {!Array<!proto.AiService.DiscordOpusPacket>} value
 * @return {!proto.AiService.DiscordOpusPacketList} returns this
*/
proto.AiService.DiscordOpusPacketList.prototype.setPacketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AiService.DiscordOpusPacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AiService.DiscordOpusPacket}
 */
proto.AiService.DiscordOpusPacketList.prototype.addPackets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AiService.DiscordOpusPacket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AiService.DiscordOpusPacketList} returns this
 */
proto.AiService.DiscordOpusPacketList.prototype.clearPacketsList = function() {
  return this.setPacketsList([]);
};


/**
 * optional bool is_final = 3;
 * @return {boolean}
 */
proto.AiService.DiscordOpusPacketList.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AiService.DiscordOpusPacketList} returns this
 */
proto.AiService.DiscordOpusPacketList.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.AiService);
